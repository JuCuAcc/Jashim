{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PeopleService {\n  constructor(http) {\n    this.http = http;\n    this.addPersonRequest = {\n      id: 0,\n      name: '',\n      countryId: 0,\n      cityId: 0,\n      languageSkills: '',\n      dateOfBirth: new Date(31, 12, 2023),\n      resumeFileName: '',\n      languages: [],\n      resumeFile: new File([], '')\n    };\n    this.baseApiUrl = environment.baseApiUrl;\n    this.resumeBaseUrl = environment.resumeBaseUrl;\n  }\n  getAllPeople() {\n    return this.http.get(this.baseApiUrl + '/api/people');\n  }\n  //addPerson(addPersonRequest: Person): Observable<Person> {\n  //  addPersonRequest.id = '00000000-0000-0000-0000-000000000000';\n  //  return this.http.post<Person>(this.baseApiUrl + '/api/people', addPersonRequest);\n  //}\n  addPerson(formData) {\n    const headers = new HttpHeaders({\n      'enctype': 'multipart/form-data'\n    });\n    return this.http.post(`${this.baseApiUrl}/api/people`, formData, {\n      headers\n    });\n  }\n  getPerson(id) {\n    return this.http.get(this.baseApiUrl + '/api/people/' + id);\n  }\n  updatePerson(id, updatePersonRequest) {\n    return this.http.put(this.baseApiUrl + '/api/people/' + id, updatePersonRequest);\n  }\n  deletePerson(id) {\n    return this.http.delete(this.baseApiUrl + '/api/people/' + id);\n  }\n  getCountryName(countryId) {\n    const country = this.countries.find(c => c.id === countryId);\n    return country ? country.name : '';\n  }\n  getCityName(cityId) {\n    const city = this.cities.find(c => c.id === cityId);\n    return city ? city.name : '';\n  }\n  getResumeFilePath(resumeFileName) {\n    return '${this.resumeBaseUrl}/${resumeFileName}';\n  }\n}\nPeopleService.ɵfac = function PeopleService_Factory(t) {\n  return new (t || PeopleService)(i0.ɵɵinject(i1.HttpClient));\n};\nPeopleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PeopleService,\n  factory: PeopleService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,aAAa;EAuBxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IArBxB,qBAAgB,GAAW;MACzBC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,EAAE;MACRC,SAAS,EAAE,CAAC;MACZC,MAAM,EAAE,CAAC;MACTC,cAAc,EAAE,EAAE;MAClBC,WAAW,EAAE,IAAIC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;MACnCC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,IAAIC,IAAI,CAAC,EAAE,EAAE,EAAE;KAE5B;IAKD,eAAU,GAAWd,WAAW,CAACe,UAAU;IAC3C,kBAAa,GAAWf,WAAW,CAACgB,aAAa;EAIT;EAExCC,YAAY;IACV,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAW,IAAI,CAACH,UAAU,GAAG,aAAa,CAAC;EACjE;EAEA;EACA;EACA;EAEA;EAEAI,SAAS,CAACC,QAAkB;IAC1B,MAAMC,OAAO,GAAG,IAAItB,WAAW,CAAC;MAAE,SAAS,EAAE;IAAqB,CAAE,CAAC;IACrE,OAAO,IAAI,CAACI,IAAI,CAACmB,IAAI,CAAM,GAAG,IAAI,CAACP,UAAU,aAAa,EAAEK,QAAQ,EAAE;MAAEC;IAAO,CAAE,CAAC;EACpF;EAEAE,SAAS,CAACnB,EAAU;IAClB,OAAO,IAAI,CAACD,IAAI,CAACe,GAAG,CAAS,IAAI,CAACH,UAAU,GAAG,cAAc,GAAGX,EAAE,CAAC;EACrE;EAEAoB,YAAY,CAACpB,EAAU,EAAEqB,mBAA2B;IAClD,OAAO,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAAS,IAAI,CAACX,UAAU,GAAG,cAAc,GAAGX,EAAE,EAAEqB,mBAAmB,CAAC;EAC1F;EAEAE,YAAY,CAACvB,EAAU;IACrB,OAAO,IAAI,CAACD,IAAI,CAACyB,MAAM,CAAS,IAAI,CAACb,UAAU,GAAG,cAAc,GAAGX,EAAE,CAAC;EACxE;EAIAyB,cAAc,CAACvB,SAAiB;IAC9B,MAAMwB,OAAO,GAAG,IAAI,CAACC,SAAS,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7B,EAAE,KAAKE,SAAS,CAAC;IAC5D,OAAOwB,OAAO,GAAGA,OAAO,CAACzB,IAAI,GAAG,EAAE;EACpC;EAEA6B,WAAW,CAAC3B,MAAc;IACxB,MAAM4B,IAAI,GAAG,IAAI,CAACC,MAAM,CAACJ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7B,EAAE,KAAKG,MAAM,CAAC;IACnD,OAAO4B,IAAI,GAAGA,IAAI,CAAC9B,IAAI,GAAG,EAAE;EAC9B;EAEAgC,iBAAiB,CAAC1B,cAAsB;IACtC,OAAO,yCAAyC;EAClD;;AAlEWV,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAqC,SAAbrC,aAAa;EAAAsC,YAFZ;AAAM","names":["HttpHeaders","environment","PeopleService","constructor","http","id","name","countryId","cityId","languageSkills","dateOfBirth","Date","resumeFileName","languages","resumeFile","File","baseApiUrl","resumeBaseUrl","getAllPeople","get","addPerson","formData","headers","post","getPerson","updatePerson","updatePersonRequest","put","deletePerson","delete","getCountryName","country","countries","find","c","getCityName","city","cities","getResumeFilePath","factory","providedIn"],"sourceRoot":"","sources":["D:\\Jashim\\Job\\AngularFullStack\\EIS\\FullStack UI\\FullStack.UI\\src\\app\\services\\people.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Person } from '../models/person.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PeopleService {\n\n  addPersonRequest: Person = {\n    id: 0,\n    name: '',\n    countryId: 0,\n    cityId: 0,\n    languageSkills: '',\n    dateOfBirth: new Date(31, 12, 2023),\n    resumeFileName: '',\n    languages: [],\n    resumeFile: new File([], '')\n\n  };\n\n\n\n\n  baseApiUrl: string = environment.baseApiUrl;\n  resumeBaseUrl: string = environment.resumeBaseUrl;\n  countries: any;\r\n  cities: any;\r\n  resumeFileName: any;\r\n  constructor(private http: HttpClient) { }\n\n  getAllPeople(): Observable<Person[]> {\n    return this.http.get<Person[]>(this.baseApiUrl + '/api/people');\n  }\n\n  //addPerson(addPersonRequest: Person): Observable<Person> {\n  //  addPersonRequest.id = '00000000-0000-0000-0000-000000000000';\n  //  return this.http.post<Person>(this.baseApiUrl + '/api/people', addPersonRequest);\n\n  //}\n\n  addPerson(formData: FormData): Observable<any> {\n    const headers = new HttpHeaders({ 'enctype': 'multipart/form-data' });\n    return this.http.post<any>(`${this.baseApiUrl}/api/people`, formData, { headers });\n  }\n\n  getPerson(id: string): Observable<Person> {\n    return this.http.get<Person>(this.baseApiUrl + '/api/people/' + id);\n  }\n\n  updatePerson(id: string, updatePersonRequest: Person): Observable<Person> {\n    return this.http.put<Person>(this.baseApiUrl + '/api/people/' + id, updatePersonRequest);\n  }\n\n  deletePerson(id: string): Observable<Person> {\n    return this.http.delete<Person>(this.baseApiUrl + '/api/people/' + id);\n  }\n\n\n\n  getCountryName(countryId: number) {\n    const country = this.countries.find(c => c.id === countryId);\n    return country ? country.name : '';\n  }\n\n  getCityName(cityId: number) {\n    const city = this.cities.find(c => c.id === cityId);\n    return city ? city.name : '';\n  }\n\n  getResumeFilePath(resumeFileName: string) {\n    return '${this.resumeBaseUrl}/${resumeFileName}';\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}