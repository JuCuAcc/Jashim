{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { environment } from '../../../../environments/environment';\nimport { ConfirmationDialogComponent } from '../../confirmation-dialog/confirmation-dialog.component';\nimport { Component, ViewChild } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nlet PeopleListComponent = class PeopleListComponent {\n  constructor(http, peopleService, countryService, cityService, dialog) {\n    this.http = http;\n    this.peopleService = peopleService;\n    this.countryService = countryService;\n    this.cityService = cityService;\n    this.dialog = dialog;\n    this.id = 0;\n    this.countries = [];\n    this.cities = [];\n    this.resumeFileName = \"\";\n    this.people = [];\n    this.baseApiUrl = environment.baseApiUrl;\n    this.resumeDownloadUrl = environment.resumeBaseUrl;\n  }\n  ngOnInit() {\n    this.peopleService.getAllPeople().subscribe({\n      next: people => {\n        this.people = people;\n      },\n      error: response => {\n        console.log(response);\n      }\n    });\n    this.dataSource.sort = this.sort;\n    this.countryService.getCountries().subscribe({\n      next: countries => {\n        this.countries = countries;\n        console.log(countries);\n      },\n      error: response => {\n        console.log(response);\n      }\n    });\n    this.cityService.getCities().subscribe({\n      next: cities => {\n        this.cities = cities;\n        console.log(cities);\n      },\n      error: response => {\n        console.log(response);\n      }\n    });\n  }\n  getCountryName(countryId) {\n    const country = this.countries.find(c => c.id === countryId);\n    return country ? country.name : '';\n  }\n  getCityName(cityId) {\n    const city = this.cities.find(c => c.id === cityId);\n    return city ? city.name : '';\n  }\n  getResumeFile(resumeFileName) {\n    return this.resumeDownloadUrl + '?fileName=' + resumeFileName;\n  }\n  //deleteById(id: number): Observable<Person> {\n  //  if (confirm(\"Are you sure you want to delete this person?\")) {\n  //    this.peopleService.deletePerson(id);\n  //    this.peopleService.getAllPeople().subscribe(data => {\n  //      this.people = data;\n  //    });\n  //    return this.http.delete<Person>(this.baseApiUrl + '/api/people/' + id);\n  //  }\n  //  return this.http.delete<Person>(this.baseApiUrl + '/api/people/' + id);\n  //}\n  //constructor(private dialog: MatDialog, private peopleService: PeopleService) { }\n  openDeleteConfirmationDialog(person) {\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {\n      width: '350px',\n      data: {\n        name: person.name,\n        country: person.countryId,\n        city: person.cityId\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.deleteById(person.id);\n      }\n    });\n  }\n  deleteById(id) {\n    this.peopleService.deletePerson(id).subscribe(() => {\n      this.peopleService.getAllPeople().subscribe(people => {\n        this.people = people;\n      });\n    });\n  }\n};\n__decorate([ViewChild(MatSort)], PeopleListComponent.prototype, \"sort\", void 0);\n__decorate([ViewChild(MatSort)\n//constructor(private dialog: MatDialog, private peopleService: PeopleService) { }\n], PeopleListComponent.prototype, \"openDeleteConfirmationDialog\", null);\nPeopleListComponent = __decorate([Component({\n  selector: 'app-people-list',\n  templateUrl: './people-list.component.html',\n  styleUrls: ['./people-list.component.css']\n})], PeopleListComponent);\nexport { PeopleListComponent };","map":{"version":3,"mappings":"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","names":["environment","ConfirmationDialogComponent","Component","ViewChild","MatSort","PeopleListComponent","constructor","http","peopleService","countryService","cityService","dialog","baseApiUrl","resumeBaseUrl","ngOnInit","getAllPeople","subscribe","next","people","error","response","console","log","dataSource","sort","getCountries","countries","getCities","cities","getCountryName","countryId","country","find","c","id","name","getCityName","cityId","city","getResumeFile","resumeFileName","resumeDownloadUrl","openDeleteConfirmationDialog","person","dialogRef","open","width","data","afterClosed","result","deleteById","deletePerson","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Jashim\\Job\\AngularFullStack\\EIS\\FullStack UI\\FullStack.UI\\src\\app\\components\\people\\people-list\\people-list.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { count, Observable } from 'rxjs';\r\nimport { Person } from 'src/app/models/person.model';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { City } from '../../../models/city.model';\r\nimport { Country } from '../../../models/country.model';\r\nimport { CityService } from '../../../services/city.service';\r\nimport { CountryService } from '../../../services/country.service';\r\nimport { PeopleService } from '../../../services/people.service';\r\n\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ConfirmationDialogComponent } from '../../confirmation-dialog/confirmation-dialog.component';\r\n\r\n\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatSort } from '@angular/material/sort';\r\n\r\n@Component({\r\n  selector: 'app-people-list',\r\n  templateUrl: './people-list.component.html',\r\n  styleUrls: ['./people-list.component.css']\r\n})\r\nexport class PeopleListComponent implements OnInit {\r\n\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  dataSource: any;\r\n\r\n  id: number = 0;\r\n  countries: Country[] = [];\r\n  cities: City[] = [];\r\n  resumeFileName: string = \"\";\r\n  people: Person[] = [\r\n\r\n  ];\r\n\r\n  baseApiUrl: string = environment.baseApiUrl;\r\n  resumeDownloadUrl: string = environment.resumeBaseUrl;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private peopleService: PeopleService,\r\n    private countryService: CountryService,\r\n    private cityService: CityService,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.peopleService.getAllPeople()\r\n      .subscribe({\r\n        next: (people) => {\r\n          this.people = people;\r\n        },\r\n        error: (response) => {\r\n          console.log(response);\r\n        }\r\n      });\r\n\r\n    this.dataSource.sort = this.sort;\r\n\r\n    this.countryService.getCountries()\r\n      .subscribe({\r\n        next: (countries) => {\r\n          this.countries = countries;\r\n          console.log(countries);\r\n        },\r\n        error: (response) => {\r\n          console.log(response);\r\n        }\r\n      });\r\n\r\n    this.cityService.getCities()\r\n      .subscribe({\r\n        next: (cities) => {\r\n          this.cities = cities;\r\n          console.log(cities);\r\n        },\r\n        error: (response) => {\r\n          console.log(response);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  getCountryName(countryId: any) {\r\n    const country = this.countries.find((c: { id: any; }) => c.id === countryId);\r\n    return country ? country.name : '';\r\n  }\r\n\r\n  getCityName(cityId: any) {\r\n    const city = this.cities.find((c: { id: any; }) => c.id === cityId);\r\n    return city ? city.name : '';\r\n  }\r\n  \r\n  getResumeFile(resumeFileName: string) {\r\n    return this.resumeDownloadUrl + '?fileName=' + resumeFileName;\r\n  }\r\n\r\n\r\n  //deleteById(id: number): Observable<Person> {\r\n  //  if (confirm(\"Are you sure you want to delete this person?\")) {\r\n  //    this.peopleService.deletePerson(id);\r\n  //    this.peopleService.getAllPeople().subscribe(data => {\r\n  //      this.people = data;\r\n  //    });\r\n  //    return this.http.delete<Person>(this.baseApiUrl + '/api/people/' + id);\r\n  //  }\r\n  //  return this.http.delete<Person>(this.baseApiUrl + '/api/people/' + id);\r\n  //}\r\n\r\n\r\n  @ViewChild(MatSort)\r\n  //constructor(private dialog: MatDialog, private peopleService: PeopleService) { }\r\n\r\n  openDeleteConfirmationDialog(person: Person) {\r\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {\r\n      width: '350px',\r\n      data: {\r\n        name: person.name,\r\n        country: person.countryId,\r\n        city: person.cityId\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.deleteById(person.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteById(id: number) {\r\n    this.peopleService.deletePerson(id).subscribe(() => {\r\n      this.peopleService.getAllPeople().subscribe(people => {\r\n        this.people = people;\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}