{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AddPersonComponent = class AddPersonComponent {\n  constructor(personService, router, countryService, cityService, languageService) {\n    this.personService = personService;\n    this.router = router;\n    this.countryService = countryService;\n    this.cityService = cityService;\n    this.languageService = languageService;\n    this.isChecked = false;\n    this.languages = [];\n    this.addPersonRequest = {\n      id: '',\n      name: '',\n      country: '',\n      city: '',\n      languageSkills: '',\n      dateOfBirth: new Date(2023, 1, 1),\n      resumeFileName: '',\n      languages: [],\n      cityId: 0,\n      countryId: 0\n    };\n  }\n  ngOnInit() {\n    this.countryService.getCountries().subscribe(data => {\n      this.countries = data;\n    });\n    this.cityService.getCities().subscribe(data => {\n      this.cities = data;\n    });\n    this.languageService.getLanguages().subscribe(data => {\n      this.languages = data;\n      console.log(this.languages);\n    });\n    this.getLanguages();\n    this.loadCities();\n  }\n  getLanguages() {\n    this.languageService.getLanguages().subscribe(data => {\n      this.languages = data;\n    });\n  }\n  loadCities() {\n    this.cities = [];\n    this.addPersonRequest.cityId = -1;\n    this.cityService.getCitiesByCountryId(this.addPersonRequest.countryId).subscribe(data => {\n      this.cities = data;\n    });\n  }\n  //uploadResume(event) {\n  //  let file = event.target.files[0];\n  //  let fileType = file.type;\n  //  if (fileType === 'application/pdf' || fileType === 'application/msword') {\n  //    this.addPersonRequest.resumeFileName = file;\n  //  } else {\n  //    alert('Only pdf or doc files are allowed!');\n  //  }\n  //}\n  //uploadFile(event: Event) {\n  //  const element = event.currentTarget as HTMLInputElement;\n  //  let fileList: FileList | null = element.files;\n  //  if (fileList) {\n  //    console.log(\"FileUpload -> files\", fileList);\n  //  }\n  //}\n  //fileChangeEvent(e: File[]) {\n  fileChangeEvent(e) {\n    //this.addPersonRequest.resumeFileName = e[0].name;\n    const fileType = e[0].type;\n    if (fileType === 'application/pdf' || fileType === 'application/msword') {\n      this.addPersonRequest.resumeFileName = e[0].name;\n    } else {\n      alert('Only pdf or doc files are allowed!');\n    }\n  }\n  addPerson() {\n    //console.log(this.addPersonRequest);\n    this.personService.addPerson(this.addPersonRequest).subscribe({\n      next: person => {\n        console.log(person);\n        this.router.navigate(['people']);\n      }\n    });\n  }\n};\nAddPersonComponent = __decorate([Component({\n  selector: 'app-add-person',\n  templateUrl: './add-person.component.html',\n  styleUrls: ['./add-person.component.css']\n})], AddPersonComponent);\nexport { AddPersonComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAmB1C,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAsB7BC,YACUC,aAA4B,EAC5BC,MAAc,EACdC,cAA8B,EAC9BC,WAAwB,EACxBC,eAAgC;IAJhC,kBAAa,GAAbJ,aAAa;IACb,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IACd,gBAAW,GAAXC,WAAW;IACX,oBAAe,GAAfC,eAAe;IAvBzB,cAAS,GAAY,KAAK;IAC1B,cAAS,GAAe,EAAE;IAE1B,qBAAgB,GAAW;MACzBC,EAAE,EAAE,EAAE;MACNC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE,EAAE;MACXC,IAAI,EAAE,EAAE;MACRC,cAAc,EAAE,EAAE;MAClBC,WAAW,EAAE,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;MACjCC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE,EAAE;MACbC,MAAM,EAAE,CAAC;MACTC,SAAS,EAAE;KACZ;EAUG;EAGJC,QAAQ;IACN,IAAI,CAACd,cAAc,CAACe,YAAY,EAAE,CAACC,SAAS,CAAEC,IAAe,IAAI;MAC/D,IAAI,CAACC,SAAS,GAAGD,IAAI;IACvB,CAAC,CAAC;IAEF,IAAI,CAAChB,WAAW,CAACkB,SAAS,EAAE,CAACH,SAAS,CAAEC,IAAY,IAAI;MACtD,IAAI,CAACG,MAAM,GAAGH,IAAI;IACpB,CAAC,CAAC;IAEF,IAAI,CAACf,eAAe,CAACmB,YAAY,EAAE,CAACL,SAAS,CAAEC,IAAgB,IAAI;MACjE,IAAI,CAACN,SAAS,GAAGM,IAAI;MACrBK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,SAAS,CAAC;IAC7B,CAAC,CAAC;IACF,IAAI,CAACU,YAAY,EAAE;IACnB,IAAI,CAACG,UAAU,EAAE;EACnB;EAIAH,YAAY;IACV,IAAI,CAACnB,eAAe,CAACmB,YAAY,EAAE,CAACL,SAAS,CAAEC,IAAgB,IAAI;MACjE,IAAI,CAACN,SAAS,GAAGM,IAAI;IACvB,CAAC,CAAC;EACJ;EAGAO,UAAU;IACR,IAAI,CAACJ,MAAM,GAAG,EAAE;IAChB,IAAI,CAACK,gBAAgB,CAACb,MAAM,GAAG,CAAC,CAAC;IACjC,IAAI,CAACX,WAAW,CAACyB,oBAAoB,CAAC,IAAI,CAACD,gBAAgB,CAACZ,SAAS,CAAC,CAACG,SAAS,CAAEC,IAAY,IAAI;MAChG,IAAI,CAACG,MAAM,GAAGH,IAAI;IACpB,CAAC,CAAC;EACJ;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACAU,eAAe,CAACC,CAAQ;IACtB;IACA,MAAMC,QAAQ,GAAGD,CAAC,CAAC,CAAC,CAAC,CAACE,IAAI;IACtB,IAAID,QAAQ,KAAK,iBAAiB,IAAIA,QAAQ,KAAK,oBAAoB,EAAE;MACvE,IAAI,CAACJ,gBAAgB,CAACf,cAAc,GAAGkB,CAAC,CAAC,CAAC,CAAC,CAACxB,IAAI;KACrD,MAAM;MACL2B,KAAK,CAAC,oCAAoC,CAAC;;EAE/C;EAEAC,SAAS;IACP;IACA,IAAI,CAAClC,aAAa,CAACkC,SAAS,CAAC,IAAI,CAACP,gBAAgB,CAAC,CAChDT,SAAS,CAAC;MACTiB,IAAI,EAAGC,MAAM,IAAI;QACfZ,OAAO,CAACC,GAAG,CAACW,MAAM,CAAC;QACnB,IAAI,CAACnC,MAAM,CAACoC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAElC;KACD,CAAC;EACN;CACD;AA3GYvC,kBAAkB,eAL9BD,SAAS,CAAC;EACTyC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACW1C,kBAAkB,CA2G9B;SA3GYA,kBAAkB","names":["Component","AddPersonComponent","constructor","personService","router","countryService","cityService","languageService","id","name","country","city","languageSkills","dateOfBirth","Date","resumeFileName","languages","cityId","countryId","ngOnInit","getCountries","subscribe","data","countries","getCities","cities","getLanguages","console","log","loadCities","addPersonRequest","getCitiesByCountryId","fileChangeEvent","e","fileType","type","alert","addPerson","next","person","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Jashim\\Job\\AngularFullStack\\EIS\\FullStack UI\\FullStack.UI\\src\\app\\components\\add-person\\add-person.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { City } from '../../models/city.model';\r\nimport { Country } from '../../models/country.model';\r\nimport { Language } from '../../models/language.model';\r\nimport { Person } from '../../models/person.model';\r\nimport { CityService } from '../../services/city.service';\r\nimport { CountryService } from '../../services/country.service';\r\nimport { LanguageService } from '../../services/language.service';\r\nimport { PeopleService } from '../../services/people.service';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-add-person',\r\n  templateUrl: './add-person.component.html',\r\n  styleUrls: ['./add-person.component.css']\r\n})\r\nexport class AddPersonComponent implements OnInit {\r\n  countries!: Country[];\r\n  cities!: City[];\r\n\r\n  isChecked: boolean = false;\r\n  languages: Language[] = [];\r\n\r\n  addPersonRequest: Person = {\r\n    id: '',\r\n    name: '',\r\n    country: '',\r\n    city: '',\r\n    languageSkills: '',\r\n    dateOfBirth: new Date(2023, 1, 1),\r\n    resumeFileName: '',\r\n    languages: [],\r\n    cityId: 0,\r\n    countryId: 0\r\n  };\r\n\r\n\r\n\r\n  constructor(\r\n    private personService: PeopleService,\r\n    private router: Router,\r\n    private countryService: CountryService,\r\n    private cityService: CityService,\r\n    private languageService: LanguageService\r\n  ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.countryService.getCountries().subscribe((data: Country[]) => {\r\n      this.countries = data;\r\n    });\r\n\r\n    this.cityService.getCities().subscribe((data: City[]) => {\r\n      this.cities = data;\r\n    });\r\n\r\n    this.languageService.getLanguages().subscribe((data: Language[]) => {\r\n      this.languages = data;\r\n      console.log(this.languages);\r\n    });\r\n    this.getLanguages();\r\n    this.loadCities();\r\n  }\r\n\r\n\r\n\r\n  getLanguages() {\r\n    this.languageService.getLanguages().subscribe((data: Language[]) => {\r\n      this.languages = data;\r\n    });\r\n  }\r\n\r\n\r\n  loadCities() {\r\n    this.cities = [];\r\n    this.addPersonRequest.cityId = -1;\r\n    this.cityService.getCitiesByCountryId(this.addPersonRequest.countryId).subscribe((data: City[]) => {\r\n      this.cities = data;\r\n    });\r\n  }\r\n\r\n  //uploadResume(event) {\r\n  //  let file = event.target.files[0];\r\n  //  let fileType = file.type;\r\n  //  if (fileType === 'application/pdf' || fileType === 'application/msword') {\r\n  //    this.addPersonRequest.resumeFileName = file;\r\n  //  } else {\r\n  //    alert('Only pdf or doc files are allowed!');\r\n  //  }\r\n  //}\r\n\r\n\r\n\r\n  //uploadFile(event: Event) {\r\n  //  const element = event.currentTarget as HTMLInputElement;\r\n  //  let fileList: FileList | null = element.files;\r\n  //  if (fileList) {\r\n  //    console.log(\"FileUpload -> files\", fileList);\r\n  //  }\r\n  //}\r\n\r\n  //fileChangeEvent(e: File[]) {\r\n  fileChangeEvent(e: any[]) {\r\n    //this.addPersonRequest.resumeFileName = e[0].name;\r\n    const fileType = e[0].type;\r\n        if (fileType === 'application/pdf' || fileType === 'application/msword') {\r\n          this.addPersonRequest.resumeFileName = e[0].name;\r\n    } else {\r\n      alert('Only pdf or doc files are allowed!');\r\n    }\r\n  }\r\n\r\n  addPerson() {\r\n    //console.log(this.addPersonRequest);\r\n    this.personService.addPerson(this.addPersonRequest)\r\n      .subscribe({\r\n        next: (person) => {\r\n          console.log(person);\r\n          this.router.navigate(['people']);\r\n\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}