{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PeopleService {\n  constructor(http) {\n    this.http = http;\n    this.addPersonRequest = {\n      id: 0,\n      name: '',\n      countryId: 0,\n      cityId: 0,\n      languageSkills: '',\n      dateOfBirth: new Date(),\n      resumeFileName: '',\n      languages: [],\n      resumeFile: new File([], '')\n    };\n    this.baseApiUrl = environment.baseApiUrl;\n  }\n  getAllPeople() {\n    return this.http.get(this.baseApiUrl + '/api/people');\n  }\n  //addPerson(addPersonRequest: Person): Observable<Person> {\n  //  //addPersonRequest.id = '00000000-0000-0000-0000-000000000000';\n  //  addPersonRequest.id = 0;\n  //  return this.http.post<Person>(this.baseApiUrl + '/api/people', addPersonRequest);\n  //}\n  addPerson(addPersonRequest) {\n    addPersonRequest.id = 0;\n    const loadingScreen = this.loadingController.create({\n      message: 'Adding person...'\n    });\n    loadingScreen.then(loadingEl => {\n      loadingEl.present();\n    });\n    return this.http.post(this.baseApiUrl + '/api/people', addPersonRequest).pipe(tap(() => loadingScreen.then(loadingEl => {\n      loadingEl.dismiss();\n    })), catchError(error => {\n      loadingScreen.then(loadingEl => {\n        loadingEl.dismiss();\n      });\n      this.presentToast('Error while adding person. Please try again later.');\n      return throwError(error);\n    }));\n  }\n  //addPerson(formData: FormData): Observable<any> {\n  //  const headers = new HttpHeaders({ 'enctype': 'multipart/form-data' });\n  //  return this.http.post<any>(`${this.baseApiUrl}/api/people`, formData, { headers });\n  //}\n  getPerson(id) {\n    return this.http.get(this.baseApiUrl + '/api/people/' + id);\n  }\n  updatePerson(id, updatePersonRequest) {\n    return this.http.put(this.baseApiUrl + '/api/people/' + id, updatePersonRequest);\n  }\n  deletePerson(id) {\n    return this.http.delete(this.baseApiUrl + '/api/people/' + id);\n  }\n}\nPeopleService.ɵfac = function PeopleService_Factory(t) {\n  return new (t || PeopleService)(i0.ɵɵinject(i1.HttpClient));\n};\nPeopleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PeopleService,\n  factory: PeopleService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,aAAa;EAiBxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAfxB,qBAAgB,GAAW;MACzBC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,EAAE;MACRC,SAAS,EAAE,CAAC;MACZC,MAAM,EAAE,CAAC;MACTC,cAAc,EAAE,EAAE;MAClBC,WAAW,EAAE,IAAIC,IAAI,EAAE;MACvBC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,IAAIC,IAAI,CAAC,EAAE,EAAE,EAAE;KAE5B;IAED,eAAU,GAAWd,WAAW,CAACe,UAAU;EAEH;EAExCC,YAAY;IACV,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAW,IAAI,CAACF,UAAU,GAAG,aAAa,CAAC;EACjE;EAEA;EACA;EACA;EACA;EAEA;EAEAG,SAAS,CAACC,gBAAwB;IAChCA,gBAAgB,CAACf,EAAE,GAAG,CAAC;IAEvB,MAAMgB,aAAa,GAAG,IAAI,CAACC,iBAAiB,CAACC,MAAM,CAAC;MAClDC,OAAO,EAAE;KACV,CAAC;IACFH,aAAa,CAACI,IAAI,CAACC,SAAS,IAAG;MAC7BA,SAAS,CAACC,OAAO,EAAE;IACrB,CAAC,CAAC;IAEF,OAAO,IAAI,CAACvB,IAAI,CAACwB,IAAI,CAAS,IAAI,CAACZ,UAAU,GAAG,aAAa,EAAEI,gBAAgB,CAAC,CAACS,IAAI,CACnFC,GAAG,CAAC,MAAMT,aAAa,CAACI,IAAI,CAACC,SAAS,IAAG;MACvCA,SAAS,CAACK,OAAO,EAAE;IACrB,CAAC,CAAC,CAAC,EACHC,UAAU,CAACC,KAAK,IAAG;MACjBZ,aAAa,CAACI,IAAI,CAACC,SAAS,IAAG;QAC7BA,SAAS,CAACK,OAAO,EAAE;MACrB,CAAC,CAAC;MACF,IAAI,CAACG,YAAY,CAAC,oDAAoD,CAAC;MACvE,OAAOC,UAAU,CAACF,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAIA;EACA;EACA;EACA;EAEAG,SAAS,CAAC/B,EAAU;IAClB,OAAO,IAAI,CAACD,IAAI,CAACc,GAAG,CAAS,IAAI,CAACF,UAAU,GAAG,cAAc,GAAGX,EAAE,CAAC;EACrE;EAEAgC,YAAY,CAAChC,EAAU,EAAEiC,mBAA2B;IAClD,OAAO,IAAI,CAAClC,IAAI,CAACmC,GAAG,CAAS,IAAI,CAACvB,UAAU,GAAG,cAAc,GAAGX,EAAE,EAAEiC,mBAAmB,CAAC;EAC1F;EAEAE,YAAY,CAACnC,EAAU;IACrB,OAAO,IAAI,CAACD,IAAI,CAACqC,MAAM,CAAS,IAAI,CAACzB,UAAU,GAAG,cAAc,GAAGX,EAAE,CAAC;EACxE;;AAvEWH,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAwC,SAAbxC,aAAa;EAAAyC,YAFZ;AAAM","names":["environment","PeopleService","constructor","http","id","name","countryId","cityId","languageSkills","dateOfBirth","Date","resumeFileName","languages","resumeFile","File","baseApiUrl","getAllPeople","get","addPerson","addPersonRequest","loadingScreen","loadingController","create","message","then","loadingEl","present","post","pipe","tap","dismiss","catchError","error","presentToast","throwError","getPerson","updatePerson","updatePersonRequest","put","deletePerson","delete","factory","providedIn"],"sourceRoot":"","sources":["D:\\Jashim\\Job\\AngularFullStack\\EIS\\FullStack UI\\FullStack.UI\\src\\app\\services\\people.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { Person } from '../models/person.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PeopleService {\r\n\r\n  addPersonRequest: Person = {\r\n    id: 0,\r\n    name: '',\r\n    countryId: 0,\r\n    cityId: 0,\r\n    languageSkills: '',\r\n    dateOfBirth: new Date(),\r\n    resumeFileName: '',\r\n    languages: [],\r\n    resumeFile: new File([], '')\r\n\r\n  };\r\n\r\n  baseApiUrl: string = environment.baseApiUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllPeople(): Observable<Person[]> {\r\n    return this.http.get<Person[]>(this.baseApiUrl + '/api/people');\r\n  }\r\n\r\n  //addPerson(addPersonRequest: Person): Observable<Person> {\r\n  //  //addPersonRequest.id = '00000000-0000-0000-0000-000000000000';\r\n  //  addPersonRequest.id = 0;\r\n  //  return this.http.post<Person>(this.baseApiUrl + '/api/people', addPersonRequest);\r\n\r\n  //}\r\n\r\n  addPerson(addPersonRequest: Person): Observable<Person> {\r\n    addPersonRequest.id = 0;\r\n\r\n    const loadingScreen = this.loadingController.create({\r\n      message: 'Adding person...'\r\n    });\r\n    loadingScreen.then(loadingEl => {\r\n      loadingEl.present();\r\n    });\r\n\r\n    return this.http.post<Person>(this.baseApiUrl + '/api/people', addPersonRequest).pipe(\r\n      tap(() => loadingScreen.then(loadingEl => {\r\n        loadingEl.dismiss();\r\n      })),\r\n      catchError(error => {\r\n        loadingScreen.then(loadingEl => {\r\n          loadingEl.dismiss();\r\n        });\r\n        this.presentToast('Error while adding person. Please try again later.');\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n\r\n  //addPerson(formData: FormData): Observable<any> {\r\n  //  const headers = new HttpHeaders({ 'enctype': 'multipart/form-data' });\r\n  //  return this.http.post<any>(`${this.baseApiUrl}/api/people`, formData, { headers });\r\n  //}\r\n\r\n  getPerson(id: string): Observable<Person> {\r\n    return this.http.get<Person>(this.baseApiUrl + '/api/people/' + id);\r\n  }\r\n\r\n  updatePerson(id: string, updatePersonRequest: Person): Observable<Person> {\r\n    return this.http.put<Person>(this.baseApiUrl + '/api/people/' + id, updatePersonRequest);\r\n  }\r\n\r\n  deletePerson(id: number): Observable<Person> {\r\n    return this.http.delete<Person>(this.baseApiUrl + '/api/people/' + id);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}