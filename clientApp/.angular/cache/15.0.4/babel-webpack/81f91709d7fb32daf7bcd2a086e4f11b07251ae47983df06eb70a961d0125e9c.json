{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { environment } from '../../../../environments/environment';\nimport { ConfirmationDialogComponent } from '../../confirmation-dialog/confirmation-dialog.component';\nimport { Component, ViewChild } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nlet PeopleListComponent = class PeopleListComponent {\n  constructor(http, peopleService, countryService, cityService, dialog) {\n    this.http = http;\n    this.peopleService = peopleService;\n    this.countryService = countryService;\n    this.cityService = cityService;\n    this.dialog = dialog;\n    this.id = 0;\n    this.countries = [];\n    this.cities = [];\n    this.resumeFileName = \"\";\n    this.people = [];\n    this.baseApiUrl = environment.baseApiUrl;\n    this.resumeDownloadUrl = environment.resumeBaseUrl;\n  }\n  ngOnInit() {\n    this.peopleService.getAllPeople().subscribe({\n      next: people => {\n        this.people = people;\n      },\n      error: response => {\n        console.log(response);\n      }\n    });\n    this.countryService.getCountries().subscribe({\n      next: countries => {\n        this.countries = countries;\n        console.log(countries);\n      },\n      error: response => {\n        console.log(response);\n      }\n    });\n    this.cityService.getCities().subscribe({\n      next: cities => {\n        this.cities = cities;\n        console.log(cities);\n      },\n      error: response => {\n        console.log(response);\n      }\n    });\n  }\n  openDeleteConfirmationDialog(person) {\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {\n      width: '480px',\n      data: {\n        id: person.id,\n        name: person.name,\n        country: person.countryId,\n        city: person.cityId\n      },\n      position: {\n        left: '550px',\n        top: '-450px'\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.deleteById(person.id);\n      }\n    });\n  }\n  deleteById(id) {\n    this.peopleService.deletePerson(id).subscribe(() => {\n      this.peopleService.getAllPeople().subscribe(people => {\n        this.people = people;\n      });\n    });\n  }\n  getCountryName(countryId) {\n    const country = this.countries.find(c => c.id === countryId);\n    return country ? country.name : '';\n  }\n  getCityName(cityId) {\n    const city = this.cities.find(c => c.id === cityId);\n    return city ? city.name : '';\n  }\n  getResumeFile(resumeFileName) {\n    return this.resumeDownloadUrl + '?fileName=' + resumeFileName;\n  }\n  getFiles() {\n    $.ajax({\n      type: \"POST\",\n      url: this.baseApiUrl + '/api/File/AllFiles',\n      success: function (data) {\n        for (let i = 0; i < data.length; i++) {\n          let filesData = data[i].split('\\\\');\n          let length = filesData.length;\n          console.log(filesData[length - 1]);\n        }\n        return data;\n      },\n      error: function () {\n        alert('Error occured');\n      }\n    });\n  }\n};\n__decorate([ViewChild(MatSort)], PeopleListComponent.prototype, \"sort\", void 0);\nPeopleListComponent = __decorate([Component({\n  selector: 'app-people-list',\n  templateUrl: './people-list.component.html',\n  styleUrls: ['./people-list.component.css'],\n  template: `\n    <table matSort #sort=\"matSort\">\n      <!-- table content -->\n    </table>\n  `\n})], PeopleListComponent);\nexport { PeopleListComponent };","map":{"version":3,"mappings":"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","names":["environment","ConfirmationDialogComponent","Component","ViewChild","MatSort","PeopleListComponent","constructor","http","peopleService","countryService","cityService","dialog","baseApiUrl","resumeBaseUrl","ngOnInit","getAllPeople","subscribe","next","people","error","response","console","log","getCountries","countries","getCities","cities","openDeleteConfirmationDialog","person","dialogRef","open","width","data","id","name","country","countryId","city","cityId","position","left","top","afterClosed","result","deleteById","deletePerson","getCountryName","find","c","getCityName","getResumeFile","resumeFileName","resumeDownloadUrl","getFiles","$","ajax","type","url","success","i","length","filesData","split","alert","__decorate","selector","templateUrl","styleUrls","template"],"sourceRoot":"","sources":["D:\\Jashim\\Job\\AngularFullStack\\EIS\\FullStack UI\\FullStack.UI\\src\\app\\components\\people\\people-list\\people-list.component.ts"],"sourcesContent":["import { HttpClient, HttpEvent, HttpEventType, HttpHeaders, HttpRequest } from '@angular/common/http';\r\nimport { count, Observable } from 'rxjs';\r\nimport { Person } from 'src/app/models/person.model';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { City } from '../../../models/city.model';\r\nimport { Country } from '../../../models/country.model';\r\nimport { CityService } from '../../../services/city.service';\r\nimport { CountryService } from '../../../services/country.service';\r\nimport { PeopleService } from '../../../services/people.service';\r\n\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ConfirmationDialogComponent } from '../../confirmation-dialog/confirmation-dialog.component';\r\n\r\n\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatSort } from '@angular/material/sort';\r\n\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-people-list',\r\n  templateUrl: './people-list.component.html',\r\n  styleUrls: ['./people-list.component.css'],\r\n  template: `\r\n    <table matSort #sort=\"matSort\">\r\n      <!-- table content -->\r\n    </table>\r\n  `\r\n})\r\n\r\nexport class PeopleListComponent{\r\n\r\n  id: number = 0;\r\n  countries: Country[] = [];\r\n  cities: City[] = [];\r\n  resumeFileName: string = \"\";\r\n  people: Person[] = [\r\n\r\n  ];\r\n\r\n\r\n  @ViewChild(MatSort)\r\n  sort!: MatSort;\r\n  dataSource: any;\r\n\r\n\r\n  baseApiUrl: string = environment.baseApiUrl;\r\n  resumeDownloadUrl: string = environment.resumeBaseUrl;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private peopleService: PeopleService,\r\n    private countryService: CountryService,\r\n    private cityService: CityService,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.peopleService.getAllPeople()\r\n      .subscribe({\r\n        next: (people) => {\r\n          this.people = people;\r\n        },\r\n        error: (response) => {\r\n          console.log(response);\r\n        }\r\n      });\r\n\r\n    this.countryService.getCountries()\r\n      .subscribe({\r\n        next: (countries) => {\r\n          this.countries = countries;\r\n          console.log(countries);\r\n        },\r\n        error: (response) => {\r\n          console.log(response);\r\n        }\r\n      });\r\n\r\n    this.cityService.getCities()\r\n      .subscribe({\r\n        next: (cities) => {\r\n          this.cities = cities;\r\n          console.log(cities);\r\n        },\r\n        error: (response) => {\r\n          console.log(response);\r\n        }\r\n      });\r\n  }\r\n\r\n  openDeleteConfirmationDialog(person: Person) {\r\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {\r\n      width: '480px',\r\n      data: {\r\n        id: person.id,\r\n        name: person.name,\r\n        country: person.countryId,\r\n        city: person.cityId\r\n      },\r\n      position: {\r\n        left: '550px',\r\n        top: '-450px',\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.deleteById(person.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteById(id: number) {\r\n    this.peopleService.deletePerson(id).subscribe(() => {\r\n      this.peopleService.getAllPeople().subscribe(people => {\r\n        this.people = people;\r\n      });\r\n    });\r\n  }\r\n\r\n  getCountryName(countryId: any) {\r\n    const country = this.countries.find((c: { id: any; }) => c.id === countryId);\r\n    return country ? country.name : '';\r\n  }\r\n\r\n  getCityName(cityId: any) {\r\n    const city = this.cities.find((c: { id: any; }) => c.id === cityId);\r\n    return city ? city.name : '';\r\n  }\r\n  \r\n  getResumeFile(resumeFileName: string) {\r\n    return this.resumeDownloadUrl + '?fileName=' + resumeFileName;\r\n  }\r\n\r\n\r\n\r\n  getFiles() {\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: this.baseApiUrl + '/api/File/AllFiles',\r\n      success: function (data: string | any[]) {\r\n        for (let i: number = 0; i < data.length; i++) {\r\n          let filesData = data[i].split('\\\\');\r\n          let length = filesData.length\r\n          console.log(filesData[length - 1]);\r\n        }\r\n        return data;\r\n      },\r\n      error: function () {\r\n        alert('Error occured');\r\n      }\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}