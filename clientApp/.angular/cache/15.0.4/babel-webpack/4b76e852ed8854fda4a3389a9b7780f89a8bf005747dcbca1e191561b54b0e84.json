{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EditPersonComponent = class EditPersonComponent {\n  //ngOnInit() {\n  //  this.route.paramMap.subscribe(params => {\n  //    const id = params.get('id');\n  //    if (id) {\n  //      this.personService.getPerson(id).subscribe(response => {\n  //        this.personDetails = response;\n  //        this.countryService.getCountries().subscribe((data: Country[]) => {\n  //          this.countries = data;\n  //          this.selectedCountry = this.countries.find(country => country.name === this.personDetails.country);\n  //        });\n  //        this.cityService.getCities().subscribe((data: City[]) => {\n  //          this.cities = data;\n  //          this.selectedCity = this.cities.find(city => city.name === this.personDetails.city);\n  //        });\n  //        this.languageService.getLanguages().subscribe((data: Language[]) => {\n  //          this.languages = data;\n  //          this.selectedLanguages = this.languages.filter(language => this.personDetails.languageSkills.includes(language.name));\n  //        });\n  //      });\n  //    }\n  //  });\n  //}\n  //updatePerson() {\n  //  this.personService.updatePerson(this.personDetails.id, this.personDetails)\n  //    .subscribe({\n  //      next: (response) => {\n  //        this.router.navigate(['people']);\n  //      }\n  //    });\n  //}\n  constructor(fb, personService, router, countryService, cityService, languageService, http, route) {\n    this.fb = fb;\n    this.personService = personService;\n    this.router = router;\n    this.countryService = countryService;\n    this.cityService = cityService;\n    this.languageService = languageService;\n    this.http = http;\n    this.route = route;\n    this.languageSkills = \"\";\n    this.isChecked = false;\n    this.languages = [];\n    this.personDetails = {\n      id: 0,\n      name: '',\n      country: '',\n      city: '',\n      languageSkills: '',\n      dateOfBirth: new Date(2023, 1, 1),\n      resumeFileName: '',\n      languages: [],\n      cityId: 0,\n      countryId: 0,\n      resumeFile: new File([], '')\n    };\n    this.selectedDate = new Date();\n    this.selectedLanguages = [];\n    this.options = ['Option 1', 'Option 2', 'Option 3'];\n  }\n  //constructor(private http: HttpClient, private route: ActivatedRoute, private personService: PeopleService, private router: Router) { }\n  ngOnInit() {\n    this.route.paramMap.subscribe({\n      next: params => {\n        const id = params.get('id');\n        if (id) {\n          // call api using service\n          this.personService.getPerson(id).subscribe({\n            next: response => {\n              this.personDetails = response;\n              console.log(response);\n              console.log(response['city']);\n              console.log(response['country']);\n              console.log(response['languageSkills']);\n              console.log(response['resumeFileName']);\n              console.log(response['dateOfBirth']);\n              this.selectedDate = response['dateOfBirth'];\n              this.selectedFile = response['resumeFile'];\n            }\n          });\n          this.countryService.getCountries().subscribe(data => {\n            this.countries = data;\n            this.selectedCountry = this.countries.find(country => country.name === this.personDetails.country)?.name;\n          });\n          this.cityService.getCities().subscribe(data => {\n            this.cities = data;\n            this.selectedCity = this.cities.find(city => city.name === this.personDetails.city)?.name;\n          });\n          this.languageService.getLanguages().subscribe(data => {\n            this.languages = data;\n            this.selectedLanguages = this.languages.filter(language => this.personDetails.languageSkills.includes(language.name));\n            console.log(this.selectedLanguages);\n          });\n          //this.getLanguages();\n          //this.loadCities();\n        }\n      }\n    });\n  }\n  //ngOnInit() {\n  //  this.countryService.getCountries().subscribe((data: Country[]) => {\n  //    this.countries = data;\n  //  });\n  //  this.cityService.getCities().subscribe((data: City[]) => {\n  //    this.cities = data;\n  //  });\n  //  this.languageService.getLanguages().subscribe((data: Language[]) => {\n  //    this.languages = data;\n  //  });\n  //  this.getLanguages();\n  //  this.loadCities();\n  //}\n  getLanguages() {\n    this.languageService.getLanguages().subscribe(data => {\n      this.languages = data;\n    });\n  }\n  loadCities() {\n    this.cities = [];\n    this.personDetails.cityId = -1;\n    this.cityService.getCitiesByCountryId(this.personDetails.countryId).subscribe(data => {\n      this.cities = data;\n    });\n  }\n  updatePerson() {\n    let formData = new FormData();\n    formData.append(\"updatePersonRequest\", JSON.stringify(this.personDetails));\n    formData.append(\"resume\", this.selectedResumeFile, this.selectedResumeFile.name);\n    //this.http.put('https://localhost:7043/api/People/${this.personDetails.id}', formData)\n    this.http.put('https://localhost:7043/api/People/${id}', formData).subscribe(res => {\n      console.log(res);\n    });\n  }\n  //deletePerson(id: string) {\n  //  this.personService.deletePerson(id)\n  //    .subscribe({\n  //      next: (response) => {\n  //        this.router.navigate(['people']);\n  //      }\n  //    });\n  //}\n  deletePerson(id) {\n    this.http.delete('https://localhost:7043/api/People/${id}').subscribe(res => {\n      console.log(res);\n    });\n  }\n  onFileSelected(event) {\n    this.selectedResumeFile = event.target.files[0];\n  }\n};\nEditPersonComponent = __decorate([Component({\n  selector: 'app-edit-person',\n  templateUrl: './edit-person.component.html',\n  styleUrls: ['./edit-person.component.css']\n})], EditPersonComponent);\nexport { EditPersonComponent };","map":{"version":3,"mappings":"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","names":["Component","EditPersonComponent","constructor","fb","personService","router","countryService","cityService","languageService","http","route","id","name","country","city","languageSkills","dateOfBirth","Date","resumeFileName","languages","cityId","countryId","resumeFile","File","ngOnInit","paramMap","subscribe","next","params","get","getPerson","response","personDetails","console","log","selectedDate","selectedFile","getCountries","data","countries","selectedCountry","find","getCities","cities","selectedCity","getLanguages","selectedLanguages","filter","language","includes","loadCities","getCitiesByCountryId","updatePerson","formData","FormData","append","JSON","stringify","selectedResumeFile","put","res","deletePerson","delete","onFileSelected","event","target","files","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Jashim\\Job\\AngularFullStack\\EIS\\FullStack UI\\FullStack.UI\\src\\app\\components\\edit-person\\edit-person.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Person } from '../../models/person.model';\r\nimport { PeopleService } from '../../services/people.service';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Language } from '../../models/language.model';\r\nimport { City } from '../../models/city.model';\r\nimport { Country } from '../../models/country.model';\r\nimport { LanguageService } from '../../services/language.service';\r\nimport { CityService } from '../../services/city.service';\r\nimport { CountryService } from '../../services/country.service';\r\nimport { concat } from 'rxjs/operators';\r\n\r\n\r\n@Component({\r\n  selector: 'app-edit-person',\r\n  templateUrl: './edit-person.component.html',\r\n  styleUrls: ['./edit-person.component.css']\r\n})\r\nexport class EditPersonComponent {\r\n\r\n\r\n  languageSkills: string = \"\";\r\n\r\n  countries!: Country[];\r\n  cities!: City[];\r\n\r\n  isChecked: boolean = false;\r\n  languages: Language[] = [];\r\n\r\n\r\n  addPersonForm!: FormGroup;\r\n  selectedResumeFile!: File;\r\n\r\n  personDetails: Person = {\r\n    id: 0,\r\n    name: '',\r\n    country: '',\r\n    city: '',\r\n    languageSkills: '',\r\n    dateOfBirth: new Date(2023, 1, 1),\r\n    resumeFileName: '',\r\n    languages: [],\r\n    cityId: 0,\r\n    countryId: 0,\r\n    resumeFile: new File([], '')\r\n\r\n  };\r\n    selectedDate: Date = new Date();\r\n    selectedCountry: Country | String | undefined;\r\n    selectedCity: City | String| undefined;\r\n    selectedLanguages: Language[] = [];\r\n\r\n  selectedOption!: string;\r\n    options = ['Option 1', 'Option 2', 'Option 3'];\r\n\r\n  selectedFile!: File;\r\n\r\n  //constructor(private http: HttpClient, private route: ActivatedRoute, private personService: PeopleService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe({\r\n      next: (params) => {\r\n        const id = params.get('id');\r\n        if (id) {\r\n          // call api using service\r\n          this.personService.getPerson(id).subscribe({\r\n            next: (response) => {\r\n              this.personDetails = response;\r\n              console.log(response);\r\n              console.log(response['city']);\r\n              console.log(response['country']);\r\n              console.log(response['languageSkills']);\r\n              console.log(response['resumeFileName']);\r\n              console.log(response['dateOfBirth']);\r\n\r\n              this.selectedDate = response['dateOfBirth'];\r\n              this.selectedFile = response['resumeFile'];\r\n\r\n            }\r\n          });\r\n          this.countryService.getCountries().subscribe((data: Country[]) => {\r\n            this.countries = data;\r\n            this.selectedCountry = this.countries.find(country => country.name === this.personDetails.country)?.name;\r\n          });\r\n\r\n          this.cityService.getCities().subscribe((data: City[]) => {\r\n            this.cities = data;\r\n            this.selectedCity = this.cities.find(city => city.name === this.personDetails.city)?.name;\r\n          });\r\n\r\n          this.languageService.getLanguages().subscribe((data: Language[]) => {\r\n            this.languages = data;\r\n            this.selectedLanguages = this.languages.filter(language => this.personDetails.languageSkills.includes(language.name));\r\n            console.log(this.selectedLanguages);\r\n          });\r\n          //this.getLanguages();\r\n          //this.loadCities();\r\n\r\n        }\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n\r\n  //ngOnInit() {\r\n  //  this.route.paramMap.subscribe(params => {\r\n  //    const id = params.get('id');\r\n  //    if (id) {\r\n  //      this.personService.getPerson(id).subscribe(response => {\r\n  //        this.personDetails = response;\r\n\r\n  //        this.countryService.getCountries().subscribe((data: Country[]) => {\r\n  //          this.countries = data;\r\n\r\n  //          this.selectedCountry = this.countries.find(country => country.name === this.personDetails.country);\r\n  //        });\r\n\r\n  //        this.cityService.getCities().subscribe((data: City[]) => {\r\n  //          this.cities = data;\r\n\r\n  //          this.selectedCity = this.cities.find(city => city.name === this.personDetails.city);\r\n  //        });\r\n\r\n  //        this.languageService.getLanguages().subscribe((data: Language[]) => {\r\n  //          this.languages = data;\r\n\r\n  //          this.selectedLanguages = this.languages.filter(language => this.personDetails.languageSkills.includes(language.name));\r\n  //        });\r\n  //      });\r\n  //    }\r\n  //  });\r\n  //}\r\n\r\n\r\n  //updatePerson() {\r\n  //  this.personService.updatePerson(this.personDetails.id, this.personDetails)\r\n  //    .subscribe({\r\n  //      next: (response) => {\r\n  //        this.router.navigate(['people']);\r\n  //      }\r\n  //    });\r\n  //}\r\n\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private personService: PeopleService,\r\n    private router: Router,\r\n    private countryService: CountryService,\r\n    private cityService: CityService,\r\n    private languageService: LanguageService,\r\n    private http: HttpClient,\r\n    private route: ActivatedRoute,\r\n\r\n  ) { }\r\n\r\n\r\n  //ngOnInit() {\r\n  //  this.countryService.getCountries().subscribe((data: Country[]) => {\r\n  //    this.countries = data;\r\n  //  });\r\n\r\n  //  this.cityService.getCities().subscribe((data: City[]) => {\r\n  //    this.cities = data;\r\n  //  });\r\n\r\n  //  this.languageService.getLanguages().subscribe((data: Language[]) => {\r\n  //    this.languages = data;\r\n  //  });\r\n  //  this.getLanguages();\r\n  //  this.loadCities();\r\n  //}\r\n\r\n\r\n\r\n  getLanguages() {\r\n    this.languageService.getLanguages().subscribe((data: Language[]) => {\r\n      this.languages = data;\r\n    });\r\n  }\r\n\r\n\r\n  loadCities() {\r\n    this.cities = [];\r\n    this.personDetails.cityId = -1;\r\n    this.cityService.getCitiesByCountryId(this.personDetails.countryId).subscribe((data: City[]) => {\r\n      this.cities = data;\r\n    });\r\n  }\r\n\r\n\r\n\r\n  updatePerson() {\r\n    let formData = new FormData();\r\n    formData.append(\"updatePersonRequest\", JSON.stringify(this.personDetails));\r\n    formData.append(\"resume\", this.selectedResumeFile, this.selectedResumeFile.name);\r\n\r\n    //this.http.put('https://localhost:7043/api/People/${this.personDetails.id}', formData)\r\n    this.http.put('https://localhost:7043/api/People/${id}', formData)\r\n      .subscribe(res => {\r\n        console.log(res);\r\n      });\r\n  }\r\n\r\n  //deletePerson(id: string) {\r\n  //  this.personService.deletePerson(id)\r\n  //    .subscribe({\r\n  //      next: (response) => {\r\n  //        this.router.navigate(['people']);\r\n  //      }\r\n  //    });\r\n  //}\r\n\r\n\r\n  deletePerson(id: number) {\r\n    this.http.delete('https://localhost:7043/api/People/${id}')\r\n      .subscribe(res => {\r\n        console.log(res);\r\n      });\r\n  }\r\n\r\n  onFileSelected(event: any) {\r\n    this.selectedResumeFile = event.target.files[0];\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}