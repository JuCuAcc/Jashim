{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { environment } from '../../../environments/environment';\nlet EditPersonComponent = class EditPersonComponent {\n  constructor(fb, personService, peopleService, router, countryService, cityService, languageService, http, route) {\n    this.fb = fb;\n    this.personService = personService;\n    this.peopleService = peopleService;\n    this.router = router;\n    this.countryService = countryService;\n    this.cityService = cityService;\n    this.languageService = languageService;\n    this.http = http;\n    this.route = route;\n    this.languageSkills = \"\";\n    this.isChecked = false;\n    this.languages = [];\n    this.personDetails = {\n      id: 0,\n      name: '',\n      countryId: 0,\n      cityId: 0,\n      languageSkills: '',\n      dateOfBirth: new Date(2023, 1, 1),\n      resumeFileName: '',\n      languages: [],\n      resumeFile: new File([], '')\n    };\n    this.selectedDate = new Date();\n    this.selectedLanguages = [];\n    this.options = ['Option 1', 'Option 2', 'Option 3'];\n    this.people = [];\n    this.baseApiUrl = environment.baseApiUrl;\n    this.resumeDownloadUrl = environment.resumeBaseUrl;\n    this.selectedFileName = \"\";\n    this.selectedLanguageIds = '';\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe({\n      next: params => {\n        const id = params.get('id');\n        if (id) {\n          this.personService.getPerson(id).subscribe({\n            next: response => {\n              this.selectedDate = new Date(response.dateOfBirth);\n              this.selectedFile = new File([response.resumeFile], response.resumeFileName);\n              this.selectedFileName = response.resumeFileName;\n              this.personDetails = response;\n            }\n          });\n          this.countryService.getCountries().subscribe(countries => {\n            this.countries = countries;\n            this.selectedCountry = this.countries.find(country => country.name === this.getCountryName(this.personDetails.countryId));\n          });\n          this.cityService.getCities().subscribe(cities => {\n            this.cities = cities;\n            this.selectedCity = this.cities.find(city => city.name === this.getCityName(this.personDetails.cityId));\n          });\n          //this.languageService.getLanguages().subscribe(languages => {\n          //  this.languages = languages;\n          //  this.selectedLanguages = this.languages.filter(language => this.personDetails.languageSkills.includes(language.name));\n          //});\n          let selectedLanguageIds = this.getSelectedLanguageIds();\n          this.languages.forEach(language => {\n            if (selectedLanguageIds.includes(language.id.toString())) {\n              language.isChecked = true;\n            }\n          });\n        }\n      }\n    });\n  }\n  getSelectedLanguageIds() {\n    return this.selectedLanguageIds;\n  }\n  getCountryName(countryId) {\n    const country = this.countries.find(c => c.id === countryId);\n    return country ? country.name : '';\n  }\n  getCityName(cityId) {\n    const city = this.cities.find(c => c.id === cityId);\n    return city ? city.name : '';\n  }\n  getLanguages() {\n    this.languageService.getLanguages().subscribe(data => {\n      this.languages = data;\n    });\n  }\n  loadCities() {\n    this.cities = [];\n    this.personDetails.cityId = 1;\n    this.cityService.getCitiesByCountryId(this.personDetails.countryId).subscribe(data => {\n      this.cities = data;\n    });\n  }\n  getSelectedLanguageSkills() {\n    let l = this.languages.length;\n    var p = new Array();\n    for (var i = 0; i < l; i++) {\n      if (this.languages[i].checked) {\n        p.push(this.languages[i].value);\n      }\n    }\n    return this.languageSkills = p.join(\", \");\n  }\n  updatePerson(formValues) {\n    let person = {\n      ...formValues,\n      languageSkills: this.getSelectedLanguageSkills()\n    };\n    person = {\n      ...person,\n      ...this.person\n    };\n    console.log(this.person);\n    this.peopleService.updatePerson(this.personDetails.id, person).subscribe(data => {\n      console.clear();\n      console.log(person);\n      console.log('Person updated successfully.');\n      this.refreshData();\n      this.refreshPeopleData();\n    });\n    this.router.navigate(['/people']);\n  }\n  refreshPeopleData() {\n    this.peopleService.getAllPeople().subscribe(data => {\n      this.people = data;\n    });\n  }\n  refreshData() {\n    this.languageService.getLanguages().subscribe(languages => {\n      this.languages = languages;\n    });\n  }\n  //updatePerson() {\n  //  let formData = new FormData();\n  //  formData.append(\"updatePersonRequest\", JSON.stringify(this.personDetails));\n  //  formData.append(\"resume\", this.selectedResumeFile, this.selectedResumeFile.name);\n  //  this.http.put(this.baseApiUrl + '/api/People/' + this.personDetails.id, formData)\n  //    .subscribe(res => {\n  //      console.log(res);\n  //    });\n  //  this.router.navigate(['/people']);\n  //}\n  deletePerson(id) {\n    if (confirm(\"Are you sure you want to delete this person?\")) {\n      this.http.delete(this.baseApiUrl + '/api/People/' + id).subscribe(res => {\n        console.log(res);\n        //this.router.navigate(['/people', id]);\n        this.router.navigate(['/people']);\n      });\n    }\n  }\n  onFileSelected(event) {\n    this.selectedResumeFile = event.target.files[0];\n  }\n};\n__decorate([ViewChild(MatSort)], EditPersonComponent.prototype, \"sort\", void 0);\nEditPersonComponent = __decorate([Component({\n  selector: 'app-edit-person',\n  templateUrl: './edit-person.component.html',\n  styleUrls: ['./edit-person.component.css'],\n  template: `\n    <table matSort #sort=\"matSort\">\n      <!-- table content -->\n    </table>\n  `\n})], EditPersonComponent);\nexport { EditPersonComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","MatSort","environment","EditPersonComponent","constructor","fb","personService","peopleService","router","countryService","cityService","languageService","http","route","id","name","countryId","cityId","languageSkills","dateOfBirth","Date","resumeFileName","languages","resumeFile","File","baseApiUrl","resumeBaseUrl","ngOnInit","paramMap","subscribe","next","params","get","getPerson","response","selectedDate","selectedFile","selectedFileName","personDetails","getCountries","countries","selectedCountry","find","country","getCountryName","getCities","cities","selectedCity","city","getCityName","selectedLanguageIds","getSelectedLanguageIds","forEach","language","includes","toString","isChecked","c","getLanguages","data","loadCities","getCitiesByCountryId","getSelectedLanguageSkills","l","length","p","Array","i","checked","push","value","join","updatePerson","formValues","person","console","log","clear","refreshData","refreshPeopleData","navigate","getAllPeople","people","deletePerson","confirm","delete","res","onFileSelected","event","selectedResumeFile","target","files","__decorate","selector","templateUrl","styleUrls","template"],"sourceRoot":"","sources":["D:\\Jashim\\Job\\AngularFullStack\\EIS\\FullStack UI\\FullStack.UI\\src\\app\\components\\edit-person\\edit-person.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Person } from '../../models/person.model';\r\nimport { PeopleService } from '../../services/people.service';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Language } from '../../models/language.model';\r\nimport { City } from '../../models/city.model';\r\nimport { Country } from '../../models/country.model';\r\nimport { LanguageService } from '../../services/language.service';\r\nimport { CityService } from '../../services/city.service';\r\nimport { CountryService } from '../../services/country.service';\r\nimport { concat } from 'rxjs/operators';\r\nimport { ConfirmationDialogComponent } from '../confirmation-dialog/confirmation-dialog.component';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n\r\n@Component({\r\n  selector: 'app-edit-person',\r\n  templateUrl: './edit-person.component.html',\r\n  styleUrls: ['./edit-person.component.css'],\r\n  template: `\r\n    <table matSort #sort=\"matSort\">\r\n      <!-- table content -->\r\n    </table>\r\n  `\r\n})\r\nexport class EditPersonComponent {\r\n\r\n  languageSkills: string = \"\";\r\n\r\n  countries!: Country[];\r\n  cities!: City[];\r\n\r\n  isChecked: boolean = false;\r\n  languages: any[] = [];\r\n\r\n\r\n  addPersonForm!: FormGroup;\r\n  selectedResumeFile!: File;\r\n\r\n  personDetails: Person = {\r\n    id: 0,\r\n    name: '',\r\n    countryId: 0,\r\n    cityId: 0,\r\n    languageSkills: '',\r\n    dateOfBirth: new Date(2023, 1, 1),\r\n    resumeFileName: '',\r\n    languages: [],\r\n    resumeFile: new File([], '')\r\n\r\n  };\r\n    selectedDate: Date = new Date();\r\n    selectedCountry: Country | String | undefined;\r\n    selectedCity: City | String| undefined;\r\n    selectedLanguages: Language[] = [];\r\n\r\n  selectedOption!: string;\r\n    options = ['Option 1', 'Option 2', 'Option 3'];\r\n\r\n  selectedFile!: File;\r\n    dialog: any;\r\n    people: Person[] = [];\r\n\r\n  baseApiUrl: string = environment.baseApiUrl;\r\n  resumeDownloadUrl: string = environment.resumeBaseUrl;\r\n\r\n  selectedFileName: string = \"\";\r\n    person: any;\r\n\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe({\r\n      next: params => {\r\n        const id = params.get('id');\r\n        if (id) {\r\n          this.personService.getPerson(id).subscribe({\r\n            next: response => {\r\n              this.selectedDate = new Date(response.dateOfBirth);\r\n              this.selectedFile = new File([response.resumeFile], response.resumeFileName);\r\n              this.selectedFileName = response.resumeFileName;\r\n              this.personDetails = response;\r\n            }\r\n          });\r\n          this.countryService.getCountries().subscribe(countries => {\r\n            this.countries = countries;\r\n            this.selectedCountry = this.countries.find(country => country.name === this.getCountryName(this.personDetails.countryId));\r\n          });\r\n          this.cityService.getCities().subscribe(cities => {\r\n            this.cities = cities;\r\n            this.selectedCity = this.cities.find(city => city.name === this.getCityName(this.personDetails.cityId));\r\n          });\r\n          //this.languageService.getLanguages().subscribe(languages => {\r\n          //  this.languages = languages;\r\n          //  this.selectedLanguages = this.languages.filter(language => this.personDetails.languageSkills.includes(language.name));\r\n          //});\r\n          let selectedLanguageIds = this.getSelectedLanguageIds();\r\n          this.languages.forEach(language => {\r\n            if (selectedLanguageIds.includes(language.id.toString())) {\r\n              language.isChecked = true;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  @ViewChild(MatSort)\r\n  sort!: MatSort;\r\n  dataSource: any;\r\n\r\n  private selectedLanguageIds = '';\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private personService: PeopleService,\r\n    private peopleService: PeopleService,\r\n    private router: Router,\r\n    private countryService: CountryService,\r\n    private cityService: CityService,\r\n    private languageService: LanguageService,\r\n    private http: HttpClient,\r\n    private route: ActivatedRoute\r\n\r\n  ) { }\r\n\r\n\r\n  getSelectedLanguageIds() {\r\n    return this.selectedLanguageIds;\r\n  }\r\n\r\n  getCountryName(countryId: any) {\r\n    const country = this.countries.find((c: { id: any; }) => c.id === countryId);\r\n    return country ? country.name : '';\r\n  }\r\n\r\n  getCityName(cityId: any) {\r\n    const city = this.cities.find((c: { id: any; }) => c.id === cityId);\r\n    return city ? city.name : '';\r\n  }\r\n\r\n\r\n  getLanguages() {\r\n    this.languageService.getLanguages().subscribe((data: Language[]) => {\r\n      this.languages = data;\r\n    });\r\n  }\r\n\r\n\r\n  loadCities() {\r\n    this.cities = [];\r\n    this.personDetails.cityId = 1;\r\n    this.cityService.getCitiesByCountryId(this.personDetails.countryId).subscribe((data: City[]) => {\r\n      this.cities = data;\r\n    });\r\n  }\r\n\r\n\r\n\r\n  getSelectedLanguageSkills(): string {\r\n\r\n    let l = this.languages.length;\r\n    var p = new Array();\r\n    for (var i = 0; i < l; i++) {\r\n      if (this.languages[i].checked) {\r\n        p.push(this.languages[i].value);\r\n\r\n      }\r\n    }\r\n\r\n    return this.languageSkills = p.join(\", \");\r\n  }\r\n\r\n\r\n  updatePerson(formValues: any) {\r\n    let person = {\r\n      ...formValues,\r\n      languageSkills: this.getSelectedLanguageSkills()\r\n    };\r\n    person = { ...person, ...this.person };\r\n    console.log(this.person);\r\n    this.peopleService.updatePerson(this.personDetails.id, person)\r\n      .subscribe(data => {\r\n        console.clear();\r\n        console.log(person);\r\n        console.log('Person updated successfully.');\r\n        this.refreshData();\r\n        this.refreshPeopleData();\r\n      });\r\n    this.router.navigate(['/people']);\r\n  }\r\n\r\n\r\n  refreshPeopleData() {\r\n    this.peopleService.getAllPeople().subscribe(data => {\r\n      this.people = data;\r\n    });\r\n  }\r\n\r\n  refreshData() {\r\n    this.languageService.getLanguages().subscribe(languages => {\r\n      this.languages = languages;\r\n    });\r\n  }\r\n\r\n\r\n\r\n  //updatePerson() {\r\n  //  let formData = new FormData();\r\n  //  formData.append(\"updatePersonRequest\", JSON.stringify(this.personDetails));\r\n  //  formData.append(\"resume\", this.selectedResumeFile, this.selectedResumeFile.name);\r\n\r\n  //  this.http.put(this.baseApiUrl + '/api/People/' + this.personDetails.id, formData)\r\n  //    .subscribe(res => {\r\n  //      console.log(res);\r\n  //    });\r\n  //  this.router.navigate(['/people']);\r\n  //}\r\n\r\n  deletePerson(id: number) {\r\n    if (confirm(\"Are you sure you want to delete this person?\")) {\r\n      this.http.delete(this.baseApiUrl + '/api/People/' + id)\r\n        .subscribe(res => {\r\n          console.log(res);\r\n          //this.router.navigate(['/people', id]);\r\n          this.router.navigate(['/people']);\r\n        });\r\n    }\r\n  }\r\n\r\n  onFileSelected(event: any) {\r\n    this.selectedResumeFile = event.target.files[0];\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}